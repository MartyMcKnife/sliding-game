array looks like

[[1,2,3],
[4,5,6],
[7,8,9]]

//Swap Elements in Multidimensional Array
FUNCTION Swap takes array, position1, position2
    temp = array[position1[0]][position1[1]]
    array[position1[0]][position1[1]]] = array[position2[0]][position2[1]]
    array[position2[0]][position2[1]] = temp
    return array

//Update 2-D Array
FUNCTION moveDirection takes array, element
    index = [0, 0]
    FOR each row in array
        FOR each item in sub array
            IF num = element
                index = [rowIndex, itemIndex]
            

    indexLeft = {item: array[index[0]][index[1] - 1], position: index}
    indexRight = {item: array[index[0]][index[1] + 1], position: index}
    indexTop = {item: array[index[0] - 1][index[1]], position: index}
    indexBottom = {item: array[index[0] + 1][index[1]], position: index}

    items = [indexLeft, indexRight, indexTop, indexBottom]
    FIND LOWEST from items
    IF itemsLowest > 0
        return array
    
    CALL Swap with array, itemsLowest.position, itemsLowest.item, index, element
    RETURN array

//Shuffle 1D Array
FUNCTION shuffle1D takes array
    FOR each item in array
        i = itemIndex
        j = FLOOR(RANDOM * i + 1)
        temp = array[i]
        array[i] = array[j]
        array[j] = temp

//Shuffle 2D Array
FUNCTION shuffle2D takes array
    FOR indexT in array
        FOR indexB in array[indexT]
            i1 = FLOOR(RANDOM * LENGTH of array)
            j1 = FLOOR(RANDOM * LENGTH of array)

            temp = array[indexT][indexB]

            array[indexT][indexB] = array[i1][j1]
            array[i1][j1] = temp



//Generate Game
FUNCTION genGame takes rows, cols
    total = rows * cols

    arr = []

    FOR numR in rows
        tempArr = []
        FOR numC in cols
            INSERT total to tempArr
            total = total - 1
        INSERT tempArr to arr
    
    CALL shuffle2D with arr
    return arr


//Solve Puzzle

FUNCTION solveGame takes array
    